@kernel void scalarScaledAdd(const dlong N,
                             const dfloat a,
                             const dfloat b,
                             @restrict const dfloat* X,
                             @restrict dfloat* Y)
{
  for(dlong n = 0; n < N; ++n; @tile(256,@outer,@inner))
    if(n < N)
      Y[n] = a + b * X[n];
}

@kernel void cliptOKL(const dlong Nelements,
                   @restrict dfloat * TEMP)
{
 for(dlong e=0;e<Nelements;++e;@outer(0)){
   for(int n=0;n<p_Np;++n;@inner(0)){
     const int id = e*p_Np + n;
     if(TEMP[id]>1.0)
          {
          TEMP[id] = 1.0;
          }
     if(TEMP[id]<0.0)
          {
          TEMP[id] = 0.0;
          }
   }
 }
}

void velocityDirichletConditions(bcData *bc)
{
  bc->u = 0.0;
  bc->v = bc->usrwrk[bc->idM + 0*bc->fieldOffset];
  bc->w = 0.0;
}

void scalarDirichletConditions(bcData *bc)
{
  bc->s = 0;
  if(bc->id==1){
    if(bc->scalarId == 0) bc->s = bc->usrwrk[bc->idM + 1*bc->fieldOffset];
    if(bc->scalarId == 1) bc->s = bc->usrwrk[bc->idM + 2*bc->fieldOffset];
    if(bc->scalarId == 2) bc->s = bc->usrwrk[bc->idM + 3*bc->fieldOffset];
  } 
}
